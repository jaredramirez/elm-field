var _jaredramirez$elm_form$Field_String$optional = F2(
	function (validationFunction, field) {
		var _p0 = field;
		_v0_3:
		do {
			switch (_p0.ctor) {
				case 'Valid':
					if (_p0._0 === '') {
						return _jaredramirez$elm_form$Field$Valid('');
					} else {
						break _v0_3;
					}
				case 'Invalid':
					if (_p0._1 === '') {
						return A2(_jaredramirez$elm_form$Field$Invalid, _p0._0, '');
					} else {
						break _v0_3;
					}
				default:
					if (_p0._0 === '') {
						return _jaredramirez$elm_form$Field$Disabled('');
					} else {
						break _v0_3;
					}
			}
		} while(false);
		return validationFunction(_p0);
	});
var _jaredramirez$elm_form$Field_String$exactly = function (x) {
	return A2(
		_jaredramirez$elm_form$Field$test,
		function (value) {
			return _elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$String$length(value),
				x) < 1;
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Must be at exactly ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(x),
				'characters')));
};
var _jaredramirez$elm_form$Field_String$atMost = function (x) {
	return A2(
		_jaredramirez$elm_form$Field$test,
		function (value) {
			return _elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$String$length(value),
				x) < 1;
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Must be at most ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(x),
				'characters')));
};
var _jaredramirez$elm_form$Field_String$atLeast = function (x) {
	return A2(
		_jaredramirez$elm_form$Field$test,
		function (value) {
			return _elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$String$length(value),
				x) > -1;
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			'Must be at least ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(x),
				'characters')));
};
var _jaredramirez$elm_form$Field_String$isSymbol = function (c) {
	var _p1 = c;
	switch (_p1.valueOf()) {
		case ',':
			return true;
		case '.':
			return true;
		case ';':
			return true;
		case '-':
			return true;
		case '_':
			return true;
		case '=':
			return true;
		default:
			return false;
	}
};
var _jaredramirez$elm_form$Field_String$isAlphaNum = function (c) {
	return _elm_lang$core$Char$isLower(c) || (_elm_lang$core$Char$isUpper(c) || _elm_lang$core$Char$isDigit(c));
};
var _jaredramirez$elm_form$Field_String$emailParser = A2(
	_elm_tools$parser$Parser_ops['|.'],
	A2(
		_elm_tools$parser$Parser_ops['|='],
		A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						_elm_tools$parser$Parser$succeed(
							F5(
								function (main, at, domain, dot, com) {
									return A2(
										_elm_lang$core$Basics_ops['++'],
										main,
										A2(
											_elm_lang$core$Basics_ops['++'],
											at,
											A2(
												_elm_lang$core$Basics_ops['++'],
												domain,
												A2(_elm_lang$core$Basics_ops['++'], dot, com))));
								})),
						A2(
							_elm_tools$parser$Parser$keep,
							_elm_tools$parser$Parser$oneOrMore,
							function (c) {
								return _jaredramirez$elm_form$Field_String$isAlphaNum(c) || _jaredramirez$elm_form$Field_String$isSymbol(c);
							})),
					A2(
						_elm_tools$parser$Parser$keep,
						_elm_tools$parser$Parser$Exactly(1),
						function (c) {
							return _elm_lang$core$Native_Utils.eq(
								c,
								_elm_lang$core$Native_Utils.chr('@'));
						})),
				A2(
					_elm_tools$parser$Parser$keep,
					_elm_tools$parser$Parser$AtLeast(2),
					function (c) {
						return _jaredramirez$elm_form$Field_String$isAlphaNum(c) || _jaredramirez$elm_form$Field_String$isSymbol(c);
					})),
			A2(
				_elm_tools$parser$Parser$keep,
				_elm_tools$parser$Parser$Exactly(1),
				function (c) {
					return _elm_lang$core$Native_Utils.eq(
						c,
						_elm_lang$core$Native_Utils.chr('.'));
				})),
		A2(
			_elm_tools$parser$Parser$keep,
			_elm_tools$parser$Parser$AtLeast(2),
			function (c) {
				return _jaredramirez$elm_form$Field_String$isAlphaNum(c);
			})),
	_elm_tools$parser$Parser$end);
var _jaredramirez$elm_form$Field_String$email = A2(
	_jaredramirez$elm_form$Field$test,
	function (value) {
		var _p2 = A2(_elm_tools$parser$Parser$run, _jaredramirez$elm_form$Field_String$emailParser, value);
		if (_p2.ctor === 'Ok') {
			return true;
		} else {
			return false;
		}
	},
	'Invalid email');
var _jaredramirez$elm_form$Field_String$required = A2(
	_jaredramirez$elm_form$Field$test,
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.eq(x, y);
		})(''),
	'Required');
